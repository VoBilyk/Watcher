// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Watcher.DataAccess.Data;

namespace Watcher.DataAccess.Data.Migrations
{
    [DbContext(typeof(WatcherDbContext))]
    [Migration("20180914082817_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutoScale");

                    b.Property<int>("DashboardId");

                    b.Property<bool>("Gradient");

                    b.Property<int>("HistoryTime");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLightTheme");

                    b.Property<bool>("IsShowSeriesOnHover");

                    b.Property<bool>("IsTooltipDisabled");

                    b.Property<string>("LegendTitle");

                    b.Property<int>("MostLoaded");

                    b.Property<double>("RangeFillOpacity");

                    b.Property<bool>("RoundDomains");

                    b.Property<string>("SchemeType");

                    b.Property<bool>("ShowCommon");

                    b.Property<bool>("ShowGridLines");

                    b.Property<bool>("ShowLegend");

                    b.Property<bool>("ShowXAxis");

                    b.Property<bool>("ShowXAxisLabel");

                    b.Property<bool>("ShowYAxis");

                    b.Property<bool>("ShowYAxisLabel");

                    b.Property<string>("Sources");

                    b.Property<int>("Threshold");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("XAxisLabel");

                    b.Property<string>("YAxisLabel");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.ToTable("Charts");

                    b.HasData(
                        new { Id = 91, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 76, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 92, AutoScale = true, DashboardId = 89, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 46, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 93, AutoScale = true, DashboardId = 83, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 45, Title = "", Type = 2, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 94, AutoScale = true, DashboardId = 86, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 65, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 95, AutoScale = true, DashboardId = 84, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 20, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 96, AutoScale = true, DashboardId = 90, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 30, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 97, AutoScale = true, DashboardId = 85, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 37, Title = "", Type = 1, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 98, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 87, Title = "", Type = 3, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 99, AutoScale = true, DashboardId = 88, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 42, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" },
                        new { Id = 100, AutoScale = true, DashboardId = 87, Gradient = false, HistoryTime = 5, IsDeleted = false, IsLightTheme = true, IsShowSeriesOnHover = true, IsTooltipDisabled = false, LegendTitle = "Legend", MostLoaded = 1, RangeFillOpacity = 0.5, RoundDomains = false, SchemeType = "ordinal", ShowCommon = false, ShowGridLines = true, ShowLegend = true, ShowXAxis = true, ShowXAxisLabel = true, ShowYAxis = true, ShowYAxisLabel = true, Sources = "0,1", Threshold = 54, Title = "", Type = 0, XAxisLabel = "X Label", YAxisLabel = "Y Label" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("OrganizationId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OrganizationId")
                        .IsUnique()
                        .HasFilter("[OrganizationId] IS NOT NULL");

                    b.ToTable("Chats");

                    b.HasData(
                        new { Id = 21, CreatedById = "80b514b8-529e-49a9-a795-09cbfd52c4e1", IsDeleted = false, Name = "autem", Type = 0 },
                        new { Id = 22, CreatedById = "4c4c4312-0971-4275-bb34-f71a3bace392", IsDeleted = false, Name = "sint", Type = 0 },
                        new { Id = 23, CreatedById = "b4e997d1-19e4-482f-823d-4171b363dcc3", IsDeleted = false, Name = "asperiores", Type = 0 },
                        new { Id = 24, CreatedById = "80b514b8-529e-49a9-a795-09cbfd52c4e1", IsDeleted = false, Name = "in", Type = 0 },
                        new { Id = 25, CreatedById = "9053142c-1ad7-402d-968e-5407670c8b2b", IsDeleted = false, Name = "enim", Type = 0 },
                        new { Id = 26, CreatedById = "051af418-dccf-47b5-8e85-17ca398e968b", IsDeleted = false, Name = "officia", Type = 0 },
                        new { Id = 27, CreatedById = "017421d0-13e2-4d48-9eed-afa09fdde7d3", IsDeleted = false, Name = "suscipit", Type = 0 },
                        new { Id = 28, CreatedById = "4c4c4312-0971-4275-bb34-f71a3bace392", IsDeleted = false, Name = "odit", Type = 0 },
                        new { Id = 29, CreatedById = "b4e997d1-19e4-482f-823d-4171b363dcc3", IsDeleted = false, Name = "eos", Type = 0 },
                        new { Id = 30, CreatedById = "80b514b8-529e-49a9-a795-09cbfd52c4e1", IsDeleted = false, Name = "omnis", Type = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.CollectorAppVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DebLink");

                    b.Property<string>("ExeLink");

                    b.Property<bool>("IsActive");

                    b.Property<string>("TgzLink");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("CollectorAppVersions");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("InstanceId");

                    b.ToTable("Dashboards");

                    b.HasData(
                        new { Id = 81, CreatedAt = new DateTime(2018, 9, 14, 11, 1, 56, 521, DateTimeKind.Local), InstanceId = 74, IsDeleted = false, Title = "Title202" },
                        new { Id = 82, CreatedAt = new DateTime(2018, 9, 14, 2, 6, 49, 275, DateTimeKind.Local), InstanceId = 78, IsDeleted = false, Title = "Title300" },
                        new { Id = 83, CreatedAt = new DateTime(2018, 9, 13, 23, 17, 20, 543, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title650" },
                        new { Id = 84, CreatedAt = new DateTime(2018, 9, 13, 18, 39, 23, 442, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title182" },
                        new { Id = 85, CreatedAt = new DateTime(2018, 9, 13, 14, 19, 13, 279, DateTimeKind.Local), InstanceId = 79, IsDeleted = false, Title = "Title375" },
                        new { Id = 86, CreatedAt = new DateTime(2018, 9, 14, 10, 59, 26, 910, DateTimeKind.Local), InstanceId = 77, IsDeleted = false, Title = "Title681" },
                        new { Id = 87, CreatedAt = new DateTime(2018, 9, 14, 0, 38, 0, 170, DateTimeKind.Local), InstanceId = 75, IsDeleted = false, Title = "Title530" },
                        new { Id = 88, CreatedAt = new DateTime(2018, 9, 14, 5, 4, 23, 888, DateTimeKind.Local), InstanceId = 72, IsDeleted = false, Title = "Title339" },
                        new { Id = 89, CreatedAt = new DateTime(2018, 9, 14, 6, 34, 25, 140, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title270" },
                        new { Id = 90, CreatedAt = new DateTime(2018, 9, 13, 15, 1, 4, 844, DateTimeKind.Local), InstanceId = 71, IsDeleted = false, Title = "Title260" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<int>("Friendliness");

                    b.Property<int>("Informatively");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Quickness");

                    b.Property<int?>("ResponseId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<int>("WillUse");

                    b.HasKey("Id");

                    b.HasIndex("ResponseId")
                        .IsUnique()
                        .HasFilter("[ResponseId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new { Id = 41, CreatedAt = new DateTime(2018, 9, 13, 21, 34, 40, 17, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Aperiam iusto aperiam aut.", UserId = "9053142c-1ad7-402d-968e-5407670c8b2b", WillUse = 0 },
                        new { Id = 42, CreatedAt = new DateTime(2018, 9, 14, 3, 56, 4, 473, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Earum aut at consequatur dolorem rerum non.", UserId = "8f08ab90-0943-4926-8252-1b13121c2498", WillUse = 0 },
                        new { Id = 43, CreatedAt = new DateTime(2018, 9, 14, 3, 5, 16, 964, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Harum dolor quasi molestiae sapiente id.", UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1", WillUse = 0 },
                        new { Id = 44, CreatedAt = new DateTime(2018, 9, 13, 19, 45, 26, 164, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Et consequatur veritatis rem consequatur.", UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", WillUse = 0 },
                        new { Id = 45, CreatedAt = new DateTime(2018, 9, 13, 19, 10, 33, 274, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Doloribus rerum quia velit ad.", UserId = "051af418-dccf-47b5-8e85-17ca398e968b", WillUse = 0 },
                        new { Id = 46, CreatedAt = new DateTime(2018, 9, 13, 21, 25, 39, 418, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Dolor sunt distinctio dolor quis maiores alias.", UserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", WillUse = 0 },
                        new { Id = 47, CreatedAt = new DateTime(2018, 9, 14, 3, 7, 44, 777, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Voluptatem sunt omnis architecto optio nobis dolorem quis.", UserId = "4c4c4312-0971-4275-bb34-f71a3bace392", WillUse = 0 },
                        new { Id = 48, CreatedAt = new DateTime(2018, 9, 13, 23, 25, 54, 178, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Ut quae quo repellat sed sed molestiae in ut ea.", UserId = "9053142c-1ad7-402d-968e-5407670c8b2b", WillUse = 0 },
                        new { Id = 49, CreatedAt = new DateTime(2018, 9, 14, 8, 42, 9, 298, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Repellendus dolorem est nesciunt et sint consequatur voluptatum totam.", UserId = "8f08ab90-0943-4926-8252-1b13121c2498", WillUse = 0 },
                        new { Id = 50, CreatedAt = new DateTime(2018, 9, 14, 9, 54, 0, 184, DateTimeKind.Local), Friendliness = 0, Informatively = 0, IsDeleted = false, Quickness = 0, Text = "Officia sint consectetur odio doloremque maiores sit.", UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", WillUse = 0 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<bool>("AggregationForDay");

                    b.Property<bool>("AggregationForHour");

                    b.Property<bool>("AggregationForMonth");

                    b.Property<bool>("AggregationForWeek");

                    b.Property<float>("CpuMaxPercent");

                    b.Property<float>("DiskMaxPercent");

                    b.Property<Guid>("GuidId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("OrganizationId");

                    b.Property<string>("Platform")
                        .IsRequired();

                    b.Property<float>("RamMaxPercent");

                    b.Property<DateTime>("StatusCheckedAt");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Instances");

                    b.HasData(
                        new { Id = 71, Address = "1e:86:53:5c:4a:4b", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 62, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance419" },
                        new { Id = 72, Address = "b7:ba:5d:ef:b9:a1", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance876" },
                        new { Id = 73, Address = "c3:a4:8c:e5:25:dc", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 66, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance902" },
                        new { Id = 74, Address = "fc:1d:c1:f4:fa:20", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 69, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance82" },
                        new { Id = 75, Address = "6d:2d:3c:45:9e:4d", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 68, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance477" },
                        new { Id = 76, Address = "44:f3:25:50:c5:7a", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Linux", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance987" },
                        new { Id = 77, Address = "bb:05:34:08:0e:99", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance217" },
                        new { Id = 78, Address = "c5:9e:51:a3:ad:96", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 65, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance954" },
                        new { Id = 79, Address = "27:d9:26:85:92:08", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance278" },
                        new { Id = 80, Address = "26:6e:ed:0c:88:68", AggregationForDay = true, AggregationForHour = true, AggregationForMonth = true, AggregationForWeek = false, CpuMaxPercent = 90f, DiskMaxPercent = 90f, GuidId = new Guid("00000000-0000-0000-0000-000000000000"), IsActive = true, IsDeleted = false, OrganizationId = 70, Platform = "Windows", RamMaxPercent = 90f, StatusCheckedAt = new DateTime(2018, 1, 1, 1, 1, 1, 0, DateTimeKind.Unspecified), Title = "Instance185" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChatId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.HasData(
                        new { Id = 31, ChatId = 22, CreatedAt = new DateTime(2018, 9, 14, 4, 42, 35, 104, DateTimeKind.Local), IsDeleted = false, Text = "Fugit quis nesciunt eveniet voluptas eum quas accusantium.", UserId = "051af418-dccf-47b5-8e85-17ca398e968b", WasRead = true },
                        new { Id = 32, ChatId = 28, CreatedAt = new DateTime(2018, 9, 13, 12, 43, 30, 791, DateTimeKind.Local), IsDeleted = false, Text = "Dignissimos amet dolorem eum ea nesciunt quibusdam et.", UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1", WasRead = true },
                        new { Id = 33, ChatId = 28, CreatedAt = new DateTime(2018, 9, 14, 0, 15, 31, 566, DateTimeKind.Local), IsDeleted = false, Text = "Omnis omnis et.", UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", WasRead = true },
                        new { Id = 34, ChatId = 30, CreatedAt = new DateTime(2018, 9, 14, 9, 24, 2, 708, DateTimeKind.Local), IsDeleted = false, Text = "Quaerat officia possimus dolorem incidunt corrupti architecto.", UserId = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef", WasRead = false },
                        new { Id = 35, ChatId = 30, CreatedAt = new DateTime(2018, 9, 14, 2, 22, 6, 367, DateTimeKind.Local), IsDeleted = false, Text = "Distinctio non sint error nemo voluptatibus id quia dolorum aut.", UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", WasRead = true },
                        new { Id = 36, ChatId = 22, CreatedAt = new DateTime(2018, 9, 14, 0, 50, 11, 912, DateTimeKind.Local), IsDeleted = false, Text = "Hic repellendus quia.", UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", WasRead = false },
                        new { Id = 37, ChatId = 22, CreatedAt = new DateTime(2018, 9, 13, 18, 8, 15, 218, DateTimeKind.Local), IsDeleted = false, Text = "Animi voluptate alias magni.", UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1", WasRead = false },
                        new { Id = 38, ChatId = 22, CreatedAt = new DateTime(2018, 9, 14, 7, 51, 53, 775, DateTimeKind.Local), IsDeleted = false, Text = "Aliquid voluptatibus nihil omnis harum cum id atque aut cupiditate.", UserId = "b4e997d1-19e4-482f-823d-4171b363dcc3", WasRead = false },
                        new { Id = 39, ChatId = 24, CreatedAt = new DateTime(2018, 9, 14, 7, 43, 57, 827, DateTimeKind.Local), IsDeleted = false, Text = "Unde quam quia ipsum voluptates eos maiores vel sed accusantium.", UserId = "051af418-dccf-47b5-8e85-17ca398e968b", WasRead = true },
                        new { Id = 40, ChatId = 24, CreatedAt = new DateTime(2018, 9, 14, 3, 35, 4, 310, DateTimeKind.Local), IsDeleted = false, Text = "Qui molestias amet molestiae accusantium hic quaerat sint ipsam odit.", UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", WasRead = true }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<Guid?>("InstanceGuidId");

                    b.Property<int?>("InstanceId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NotificationSettingId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.Property<bool>("WasRead");

                    b.HasKey("Id");

                    b.HasIndex("NotificationSettingId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new { Id = 101, CreatedAt = new DateTime(2018, 9, 13, 23, 40, 4, 903, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 18, Text = "Sit repellat veritatis qui.", UserId = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef", WasRead = false },
                        new { Id = 102, CreatedAt = new DateTime(2018, 9, 13, 16, 35, 36, 257, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Laudantium vero officiis quo omnis.", UserId = "051af418-dccf-47b5-8e85-17ca398e968b", WasRead = false },
                        new { Id = 103, CreatedAt = new DateTime(2018, 9, 14, 1, 17, 23, 533, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Aperiam veritatis odio iusto error aut eum est aliquid eos.", UserId = "b4e997d1-19e4-482f-823d-4171b363dcc3", WasRead = false },
                        new { Id = 104, CreatedAt = new DateTime(2018, 9, 13, 14, 26, 53, 284, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Eius beatae at quis rerum iure illum.", UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1", WasRead = false },
                        new { Id = 105, CreatedAt = new DateTime(2018, 9, 13, 19, 57, 33, 727, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 13, Text = "Ea repellendus voluptatem sequi.", UserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", WasRead = false },
                        new { Id = 106, CreatedAt = new DateTime(2018, 9, 14, 0, 34, 8, 253, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 16, Text = "In officia odit veniam repellendus blanditiis consectetur soluta.", UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", WasRead = false },
                        new { Id = 107, CreatedAt = new DateTime(2018, 9, 13, 13, 19, 35, 973, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 19, Text = "Voluptatibus voluptatem minima et harum.", UserId = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef", WasRead = false },
                        new { Id = 108, CreatedAt = new DateTime(2018, 9, 13, 14, 49, 44, 486, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 17, Text = "Ratione nesciunt sed consequatur adipisci neque voluptatem ea provident nihil.", UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", WasRead = false },
                        new { Id = 109, CreatedAt = new DateTime(2018, 9, 14, 2, 45, 26, 164, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 14, Text = "Asperiores fugit autem et fugiat possimus impedit.", UserId = "4c4c4312-0971-4275-bb34-f71a3bace392", WasRead = false },
                        new { Id = 110, CreatedAt = new DateTime(2018, 9, 13, 18, 6, 14, 565, DateTimeKind.Local), IsDeleted = false, NotificationSettingId = 15, Text = "Quaerat qui quas quis occaecati.", UserId = "8f08ab90-0943-4926-8252-1b13121c2498", WasRead = false }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChatId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsDisable");

                    b.Property<bool>("IsEmailable");

                    b.Property<bool>("IsMute");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationSettings");

                    b.HasData(
                        new { Id = 11, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "4c4c4312-0971-4275-bb34-f71a3bace392" },
                        new { Id = 12, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef" },
                        new { Id = 13, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = false, Type = 1, UserId = "9053142c-1ad7-402d-968e-5407670c8b2b" },
                        new { Id = 14, IsDeleted = false, IsDisable = false, IsEmailable = false, IsMute = true, Type = 3, UserId = "8f08ab90-0943-4926-8252-1b13121c2498" },
                        new { Id = 15, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 2, UserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd" },
                        new { Id = 16, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = false, Type = 4, UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1" },
                        new { Id = 17, IsDeleted = false, IsDisable = true, IsEmailable = false, IsMute = true, Type = 2, UserId = "b4e997d1-19e4-482f-823d-4171b363dcc3" },
                        new { Id = 18, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = true, Type = 1, UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e" },
                        new { Id = 19, IsDeleted = false, IsDisable = false, IsEmailable = true, IsMute = true, Type = 4, UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3" },
                        new { Id = 20, IsDeleted = false, IsDisable = true, IsEmailable = true, IsMute = false, Type = 1, UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber");

                    b.Property<string>("CreatedByUserId");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("ImageURL");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("ThemeId");

                    b.Property<string>("WebSite");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ThemeId");

                    b.ToTable("Organizations");

                    b.HasData(
                        new { Id = 61, ContactNumber = "385-382-6038", CreatedByUserId = "9053142c-1ad7-402d-968e-5407670c8b2b", Description = "", Email = "Giovanni_Fahey@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company177", ThemeId = 2, WebSite = "https://mertie.info" },
                        new { Id = 62, ContactNumber = "1-567-658-1376 x1819", CreatedByUserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", Description = "Quod voluptatem laborum et magni earum sed esse odit nisi. Itaque eum qui et debitis. Magni amet voluptatem distinctio aut sint. Optio optio quas quisquam consequatur eius dolorem.", Email = "Joshuah79@gmail.com", IsActive = true, IsDeleted = false, Name = "Company975", ThemeId = 4, WebSite = "http://estefania.net" },
                        new { Id = 63, ContactNumber = "591-382-4976", CreatedByUserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", Description = "Maxime aspernatur aut iusto odio in est necessitatibus dolor.", Email = "Milton.Fadel@gmail.com", IsActive = true, IsDeleted = false, Name = "Company406", ThemeId = 1, WebSite = "http://cielo.name" },
                        new { Id = 64, ContactNumber = "(273) 595-7182", CreatedByUserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", Description = "", Email = "Carlie_Dickens@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company976", ThemeId = 2, WebSite = "https://jared.biz" },
                        new { Id = 65, ContactNumber = "712.349.8764 x03704", CreatedByUserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", Description = "", Email = "Abigale_Blanda@gmail.com", IsActive = true, IsDeleted = false, Name = "Company622", ThemeId = 1, WebSite = "http://pinkie.biz" },
                        new { Id = 66, ContactNumber = "(523) 377-7347 x94359", CreatedByUserId = "051af418-dccf-47b5-8e85-17ca398e968b", Description = "Et repudiandae deserunt. Laborum eaque repellat ea nesciunt quis.", Email = "Evan_Gaylord@hotmail.com", IsActive = true, IsDeleted = false, Name = "Company802", ThemeId = 3, WebSite = "http://nakia.net" },
                        new { Id = 67, ContactNumber = "772.783.4739", CreatedByUserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", Description = "Eum consequuntur ea nulla non modi et in et accusamus. Et quo eligendi voluptatem laudantium autem quod soluta aspernatur. Sed officiis repellendus eveniet assumenda sed.", Email = "Broderick20@gmail.com", IsActive = true, IsDeleted = false, Name = "Company529", ThemeId = 3, WebSite = "https://ada.org" },
                        new { Id = 68, ContactNumber = "298-598-5110 x4535", CreatedByUserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", Description = "Magnam et hic odio aut. Necessitatibus recusandae quis quia eaque cum quis magnam aut.", Email = "Santiago.Bashirian@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company498", ThemeId = 3, WebSite = "http://ethan.org" },
                        new { Id = 69, ContactNumber = "(235) 417-8355", CreatedByUserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", Description = "Consequatur natus placeat est aut ut at.", Email = "Laurine.Bailey21@gmail.com", IsActive = true, IsDeleted = false, Name = "Company41", ThemeId = 2, WebSite = "https://tomas.net" },
                        new { Id = 70, ContactNumber = "1-328-871-1406 x15755", CreatedByUserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", Description = "Ipsam sit doloremque. Facilis impedit consectetur.", Email = "Jakayla75@yahoo.com", IsActive = true, IsDeleted = false, Name = "Company822", ThemeId = 3, WebSite = "https://dannie.biz" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedByUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ExperationDate");

                    b.Property<string>("InviteEmail");

                    b.Property<string>("InvitedUserId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("OrganizationId");

                    b.Property<int>("State");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InvitedUserId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationInvites");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("OrganizationRoles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Manager" },
                        new { Id = 2, IsDeleted = false, Name = "Member" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("FeedbackId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Responses");

                    b.HasData(
                        new { Id = 51, CreatedAt = new DateTime(2018, 9, 14, 3, 26, 14, 131, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Non hic repellendus fugiat ducimus sunt amet est.", UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3" },
                        new { Id = 52, CreatedAt = new DateTime(2018, 9, 14, 6, 30, 7, 556, DateTimeKind.Local), FeedbackId = 50, IsDeleted = false, Text = "Nostrum provident asperiores aut commodi et voluptatibus in quasi non.", UserId = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef" },
                        new { Id = 53, CreatedAt = new DateTime(2018, 9, 14, 8, 2, 15, 818, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Labore a sed quis ipsum voluptatem quia.", UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3" },
                        new { Id = 54, CreatedAt = new DateTime(2018, 9, 13, 16, 44, 11, 929, DateTimeKind.Local), FeedbackId = 43, IsDeleted = false, Text = "Dicta totam ut nostrum optio.", UserId = "051af418-dccf-47b5-8e85-17ca398e968b" },
                        new { Id = 55, CreatedAt = new DateTime(2018, 9, 13, 21, 50, 23, 542, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Fuga expedita dignissimos voluptatem dolorum ut dicta quis.", UserId = "8f08ab90-0943-4926-8252-1b13121c2498" },
                        new { Id = 56, CreatedAt = new DateTime(2018, 9, 13, 23, 58, 51, 445, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Necessitatibus eum suscipit tempora similique sapiente.", UserId = "9053142c-1ad7-402d-968e-5407670c8b2b" },
                        new { Id = 57, CreatedAt = new DateTime(2018, 9, 13, 12, 20, 32, 17, DateTimeKind.Local), FeedbackId = 42, IsDeleted = false, Text = "Saepe quaerat harum minima.", UserId = "4c4c4312-0971-4275-bb34-f71a3bace392" },
                        new { Id = 58, CreatedAt = new DateTime(2018, 9, 13, 23, 6, 50, 37, DateTimeKind.Local), FeedbackId = 48, IsDeleted = false, Text = "Voluptatem aliquid nesciunt aliquam repellat culpa.", UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e" },
                        new { Id = 59, CreatedAt = new DateTime(2018, 9, 13, 11, 42, 21, 27, DateTimeKind.Local), FeedbackId = 47, IsDeleted = false, Text = "Et rerum in eaque asperiores.", UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e" },
                        new { Id = 60, CreatedAt = new DateTime(2018, 9, 14, 3, 14, 16, 24, DateTimeKind.Local), FeedbackId = 44, IsDeleted = false, Text = "Veritatis consequuntur illum autem eaque delectus deleniti voluptas amet iure.", UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new { Id = 1, IsDeleted = false, Name = "Admin" },
                        new { Id = 2, IsDeleted = false, Name = "User" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyColor")
                        .IsRequired();

                    b.Property<string>("ButtonFontSize")
                        .IsRequired();

                    b.Property<string>("ControlsHeight")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("ThemePrimaryColor")
                        .IsRequired();

                    b.Property<string>("ThemeSecondaryColor")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Themes");

                    b.HasData(
                        new { Id = 1, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Default", ThemePrimaryColor = "#007ad9", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 2, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Darkness", ThemePrimaryColor = "#f58400", ThemeSecondaryColor = "#ffffff" },
                        new { Id = 3, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Lightness", ThemePrimaryColor = "#1c94c4", ThemeSecondaryColor = "#f6a828" },
                        new { Id = 4, BodyColor = "#F8FAFC", ButtonFontSize = "14px", ControlsHeight = "33px", IsDeleted = false, Name = "Voclain", ThemePrimaryColor = "#c95864", ThemeSecondaryColor = "#ffffff" }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Bio");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DisplayName")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("EmailForNotifications");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<int?>("LastPickedOrganizationId");

                    b.Property<string>("PhotoURL");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("LastPickedOrganizationId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", CreatedAt = new DateTime(2018, 9, 14, 5, 42, 52, 49, DateTimeKind.Local), DisplayName = "Anabelle", Email = "Emiliano_Pfeffer67@hotmail.com", FirstName = "Duane", IsActive = true, IsDeleted = false, LastName = "Schaefer", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg", RoleId = 2 },
                        new { Id = "5eae5868-a67d-459e-9ce9-af417b9eca7e", CreatedAt = new DateTime(2018, 9, 13, 23, 11, 49, 359, DateTimeKind.Local), DisplayName = "Zion", Email = "Hilma.Will36@gmail.com", FirstName = "Tianna", IsActive = true, IsDeleted = false, LastName = "Ritchie", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg", RoleId = 1 },
                        new { Id = "9053142c-1ad7-402d-968e-5407670c8b2b", CreatedAt = new DateTime(2018, 9, 13, 20, 53, 36, 991, DateTimeKind.Local), DisplayName = "Madisyn", Email = "Selena.Vandervort33@gmail.com", FirstName = "Earline", IsActive = true, IsDeleted = false, LastName = "Abbott", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg", RoleId = 2 },
                        new { Id = "b4e997d1-19e4-482f-823d-4171b363dcc3", CreatedAt = new DateTime(2018, 9, 14, 8, 50, 58, 378, DateTimeKind.Local), DisplayName = "Eldon", Email = "Mortimer.Von42@yahoo.com", FirstName = "Dallin", IsActive = true, IsDeleted = false, LastName = "Bosco", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg", RoleId = 2 },
                        new { Id = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef", CreatedAt = new DateTime(2018, 9, 13, 21, 47, 52, 139, DateTimeKind.Local), DisplayName = "Bradford", Email = "Montana_Yost@yahoo.com", FirstName = "Winston", IsActive = true, IsDeleted = false, LastName = "Schoen", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg", RoleId = 2 },
                        new { Id = "8f08ab90-0943-4926-8252-1b13121c2498", CreatedAt = new DateTime(2018, 9, 14, 9, 8, 36, 261, DateTimeKind.Local), DisplayName = "Maudie", Email = "Obie_Abernathy92@hotmail.com", FirstName = "Emilia", IsActive = true, IsDeleted = false, LastName = "Bartell", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg", RoleId = 2 },
                        new { Id = "017421d0-13e2-4d48-9eed-afa09fdde7d3", CreatedAt = new DateTime(2018, 9, 13, 14, 5, 1, 250, DateTimeKind.Local), DisplayName = "Danial", Email = "Itzel.Rosenbaum@gmail.com", FirstName = "Eulah", IsActive = true, IsDeleted = false, LastName = "Ondricka", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg", RoleId = 2 },
                        new { Id = "4c4c4312-0971-4275-bb34-f71a3bace392", CreatedAt = new DateTime(2018, 9, 13, 19, 50, 12, 374, DateTimeKind.Local), DisplayName = "Ozella", Email = "Larry_Heidenreich@gmail.com", FirstName = "Bria", IsActive = true, IsDeleted = false, LastName = "Bernhard", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg", RoleId = 2 },
                        new { Id = "051af418-dccf-47b5-8e85-17ca398e968b", CreatedAt = new DateTime(2018, 9, 13, 19, 22, 46, 630, DateTimeKind.Local), DisplayName = "Alford", Email = "Alena_Bashirian@gmail.com", FirstName = "Werner", IsActive = true, IsDeleted = false, LastName = "Lehner", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg", RoleId = 2 },
                        new { Id = "80b514b8-529e-49a9-a795-09cbfd52c4e1", CreatedAt = new DateTime(2018, 9, 14, 1, 14, 57, 672, DateTimeKind.Local), DisplayName = "Savion", Email = "Micaela_Altenwerth50@yahoo.com", FirstName = "Sydnee", IsActive = true, IsDeleted = false, LastName = "Schaden", PhotoURL = "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg", RoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ChatId");

                    b.HasKey("UserId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("OrganizationId");

                    b.Property<int>("OrganizationRoleId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationRoleId");

                    b.ToTable("UserOrganizations");

                    b.HasData(
                        new { UserId = "fbd4c9e9-1ad1-4eb3-8de8-0fb11a9df1dd", OrganizationId = 67, OrganizationRoleId = 1 },
                        new { UserId = "5eae5868-a67d-459e-9ce9-af417b9eca7e", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "9053142c-1ad7-402d-968e-5407670c8b2b", OrganizationId = 64, OrganizationRoleId = 1 },
                        new { UserId = "b4e997d1-19e4-482f-823d-4171b363dcc3", OrganizationId = 69, OrganizationRoleId = 1 },
                        new { UserId = "1e2d61b9-7e5b-40f5-9866-7fd24a3cfaef", OrganizationId = 65, OrganizationRoleId = 1 },
                        new { UserId = "8f08ab90-0943-4926-8252-1b13121c2498", OrganizationId = 66, OrganizationRoleId = 1 },
                        new { UserId = "017421d0-13e2-4d48-9eed-afa09fdde7d3", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "4c4c4312-0971-4275-bb34-f71a3bace392", OrganizationId = 62, OrganizationRoleId = 1 },
                        new { UserId = "051af418-dccf-47b5-8e85-17ca398e968b", OrganizationId = 63, OrganizationRoleId = 1 },
                        new { UserId = "80b514b8-529e-49a9-a795-09cbfd52c4e1", OrganizationId = 69, OrganizationRoleId = 1 }
                    );
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chart", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Dashboard", "Dashboard")
                        .WithMany("Charts")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedBy")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithOne("Chat")
                        .HasForeignKey("Watcher.DataAccess.Entities.Chat", "OrganizationId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Dashboard", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Instance", "Instance")
                        .WithMany("Dashboards")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Feedback", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Response", "Response")
                        .WithOne("Feedback")
                        .HasForeignKey("Watcher.DataAccess.Entities.Feedback", "ResponseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Instance", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("Instances")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Message", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Notification", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.NotificationSetting", "NotificationSetting")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationSettingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UsersSettings")
                        .HasForeignKey("ChatId");

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("NotificationSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Organization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("CreatedOrganizations")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.Theme", "Theme")
                        .WithMany()
                        .HasForeignKey("ThemeId");
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.OrganizationInvite", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "CreatedByUser")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Watcher.DataAccess.Entities.User", "InvitedUser")
                        .WithMany()
                        .HasForeignKey("InvitedUserId");

                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.Response", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("Responses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.User", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "LastPickedOrganization")
                        .WithMany()
                        .HasForeignKey("LastPickedOrganizationId");

                    b.HasOne("Watcher.DataAccess.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserChat", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Chat", "Chat")
                        .WithMany("UserChats")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Watcher.DataAccess.Entities.UserOrganization", b =>
                {
                    b.HasOne("Watcher.DataAccess.Entities.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.OrganizationRole", "OrganizationRole")
                        .WithMany()
                        .HasForeignKey("OrganizationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Watcher.DataAccess.Entities.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
